@page "/"

<h1>VIA JSON Builder</h1>

<table class="table-borderless">
    <tbody>
        <tr>
            <td>Name</td>
            <td></td>
            <td><input type="text" @bind="@Name" /></td>
        </tr>
        <tr>
            <td>Vendor ID</td>
            <td></td>
            <td><input type="text" @bind="@VendorId" /></td>
        </tr>
        <tr>
            <td>Product ID</td>
            <td></td>
            <td><input type="text" @bind="@ProductId" /></td>
        </tr>
        <tr>
            <td>Lighting</td>
            <td></td>
            <td>
                <select @onchange="Select">
                    @foreach (var item in LightingList)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td>Matrix</td>
            <td>Rows</td>
            <td><input type="number" @bind="@Rows" /></td>
        </tr>
        <tr>
            <td></td>
            <td>Cols</td>
            <td><input type="number" @bind="@Cols" /></td>
        </tr>
        <tr>
            <td>Layouts</td>
            <td>Labels</td>
            <td><textarea cols="100" rows="1" @bind="@Labels" /></td>
        </tr>
        <tr>
            <td></td>
            <td valign="top">Keymap</td>
            <td><textarea cols="100" rows="10" @bind="@Keymap" /></td>
        </tr>
    </tbody>
</table>

<div class="drag-drop-zone">
    <InputFile OnChange="OnUpload" />
    @Status
</div>

<button class="btn-primary" @onclick=@(async () => await Download())>JSON ダウンロード</button>

<br />
<br />

@code{
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    private const string DEFAULT_STATUS = "クリックまたはドラッグ&ドロップで config.h / JSONファイルをアップロード";
    private string Status = DEFAULT_STATUS;

    private readonly Regex _nameRex = new Regex(@".*(\r|\n).*?PRODUCT\s+(?<name>.*?)(\r|\n).*");
    private readonly Regex _vendorRex = new Regex(@".*(\r|\n).*?VENDOR_ID\s+(?<vendor>.*)(\r|\n).*");
    private readonly Regex _productRex = new Regex(@".*(\r|\n).*?PRODUCT_ID\s+(?<product>.*)(\r|\n).*");

    private string Name { get; set; }
    private string VendorId { get; set; }
    private string ProductId { get; set; }
    private string Lighting { get; set; } = ViaJsonBuilder.Models.Via.Lighting.none.ToString();
    private int Rows { get; set; }
    private int Cols { get; set; }
    private string Labels { get; set; }
    private string Keymap { get; set; }

    private IEnumerable<string> LightingList = Enum.GetNames(typeof(Lighting));

    private async Task OnUpload(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file == null)
        {
            return;
        }

        this.Status = "Loading...";

        var fileName = file.Name;

        using var reader = new StreamReader(file.Data);

        if (fileName.ToLower().Equals("config.h"))
        {
            this.FillProperties(await reader.ReadToEndAsync());
        }
        else if (fileName.ToLower().EndsWith(".json"))
        {
            this.Keymap = await reader.ReadToEndAsync();
        }

        this.Status = DEFAULT_STATUS;
    }

    private void FillProperties(string target)
    {

        if (this._nameRex.IsMatch(target))
        {
            this.Name = this._nameRex.Match(target).Groups["name"].Value.Trim();
        }

        if (this._vendorRex.IsMatch(target))
        {
            this.VendorId = this._vendorRex.Match(target).Groups["vendor"].Value.Trim();
        }

        if (this._productRex.IsMatch(target))
        {
            this.ProductId = this._productRex.Match(target).Groups["product"].Value.Trim();
        }
    }

    private async ValueTask Download()
    {
        var matrix = new Matrix
        {
            Rows = this.Rows,
            Cols = this.Cols,
        };

        IEnumerable<dynamic> labels = Enumerable.Empty<dynamic>();

        if (this.Labels.HasMeaningfulValue())
        {
            var formatted = this.Labels.Split(",")
                .Select(x =>
                {
                    if (x.StartsWith("[") && !x.EndsWith("]"))
                    {
                        return "[" + x.TrimStart('[').Enclose(@"""");
                    }

                    if (!x.StartsWith("[") && x.EndsWith("]"))
                    {
                        return x.TrimEnd(']').Enclose(@"""") + "]";
                    }

                    return x.Enclose(@"""");
                })
                .Join(",");

            var buff = System.Text.Encoding.UTF8.GetBytes($"[{formatted}]");
            using var ms = new MemoryStream(buff);
            labels = await JsonSerializer.DeserializeAsync<IEnumerable<dynamic>>(ms);
        }

        dynamic keymap = null;

        if (this.Keymap.HasMeaningfulValue())
        {
            keymap = JsonSerializer.Deserialize<dynamic>(this.Keymap);
        }

        var layouts = new Layouts
        {
            Labels = labels,
            Keymap = keymap,
        };

        var model = new ViaModel
        {
            Name = this.Name,
            VenderId = this.VendorId,
            ProductId = this.ProductId,
            Lighting = Enum.Parse<Lighting>(this.Lighting),
            Matrix = matrix,
            Layouts = layouts,
        };

        var json = JsonSerializer.ToJsonString(model);

        await this.BlazorDownloadFileService.DownloadFileFromText("via.json", json, "application/octet-stream");
    }

    private void Select(ChangeEventArgs e)
    {
        this.Lighting = e.Value.ToString();
    }
}